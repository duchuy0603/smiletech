{"version":3,"sources":["Demo/Authentication/SignIn/SignIn1.js"],"names":["SignUp1","Form","useForm","useState","setloading","dispatch","localStorage","getItem","useDispatch","history","useHistory","onSubmit","user","a","UserApi","login","respone","console","log","saveuser","savetoken","error","message","type","setTimeout","push","className","validateMessages","required","types","string","number","max","range","pattern","mismatch","onFinish","Item","name","label","rules","style","width","paddingRight","placeholder","whitespace","Password","htmlType","to"],"mappings":"+SAqIeA,UAvHC,WACd,MAAeC,IAAKC,UACpB,GADA,oBAC0BC,mBAAS,KAAnC,mBACA,GADA,UAC8BA,oBAAS,IAAvC,mBAAgBC,GAAhB,WAEMC,GADQC,aAAaC,QAAQ,SAClBC,yBACXC,EAAUC,cAiBVC,EAAQ,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACfT,GAAW,GADI,SAEOU,IAAQC,MAAMH,GAFrB,OAETI,EAFS,OAGfC,QAAQC,IAAIF,GACZX,EAASc,YAASH,IAClBX,EAASe,YAAUJ,KACnB,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAASK,QACXjB,GAAW,GACmB,uBAA1B,UAAAY,EAAQK,aAAR,eAAeC,UACjBA,IAAQD,MAAM,yCACdJ,QAAQC,IAAII,IAAQD,MAAMC,UACS,wBAA1B,UAAAN,EAAQK,aAAR,eAAeC,UACxBA,IAAQD,MAAM,2BAES,GAAhBL,EAAQO,MAA6B,GAAhBP,EAAQO,MACtCC,YAAW,WACTf,EAAQgB,KAAK,gBACZ,KAjBU,2CAAH,sDAqBd,OACE,kBAAC,IAAD,KAGE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,WACb,0BAAMA,UAAU,MAChB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,OAElB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,mCAGf,wBAAIA,UAAU,QAAd,aACA,wBAAIA,UAAU,QAAd,4BACA,kBAAC,IAAD,CAAMC,iBAzDO,CACvBC,SAAU,yDACVC,MAAO,CACLC,OAAQ,uCACRC,OAAQ,wCAEVD,OAAQ,CACNE,IAAK,iDAEPD,OAAQ,CACNE,MAAO,sCAETC,QAAS,CACPC,SAAU,yCA4CwCC,SAAUzB,GAClD,kBAAC,IAAK0B,KAAN,CACEC,KAAK,YACLC,MAAM,WACNX,UAAQ,EACRY,MAAO,CAAC,CAAEZ,UAAU,GAAQ,CAAEL,KAAM,SAAUS,IAAK,MACnDS,MAAO,CAAEC,MAAO,OAAQC,aAAc,SAEtC,kBAAC,IAAD,CAAOC,YAAY,MAErB,kBAAC,IAAKP,KAAN,CACEC,KAAK,WACLC,MAAM,WACNX,UAAQ,EACRY,MAAO,CACL,CAAEZ,UAAU,EAAMiB,YAAY,GAC9B,CAAEtB,KAAM,SAAUS,IAAK,MAEzBS,MAAO,CAAEC,MAAO,OAAQC,aAAc,SAEtC,kBAAC,IAAMG,SAAP,CAAgBF,YAAY,MAE9B,kBAAC,IAAKP,KAAN,KACE,kBAAC,IAAD,CACEX,UAAU,eACVqB,SAAS,SACTxB,KAAK,WAHP,YAgBJ,uBAAGG,UAAU,mBAAb,+BACkB,IAChB,kBAAC,IAAD,CAASsB,GAAG,0BAAZ,sBAEF,uBAAGtB,UAAU,mBAAb,8CAC2B,IACzB,kBAAC,IAAD,CAASsB,GAAG,gBAAZ","file":"static/js/23.ec3a0fc0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Input, Form, Button, message } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport Aux from \"../../../hoc/_Aux\";\r\n// import Breadcrumb from \"../../../App/layout/AdminLayout/Breadcrumb\";\r\nimport \"./signin.scss\";\r\nimport \"./../../../assets/scss/style.scss\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport UserApi from \"../../../api/user\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { savetoken, saveuser } from \"../../../store/Category/auth\";\r\nimport { Spin } from \"antd\";\r\nconst SignUp1 = () => {\r\n  const [form] = Form.useForm();\r\n  const [error, seterror] = useState(\"\");\r\n  const [loading, setloading] = useState(false);\r\n  const token = localStorage.getItem(\"token\");\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const validateMessages = {\r\n    required: \"Không được để trống !\",\r\n    types: {\r\n      string: \"${label} không hợp lệ !\",\r\n      number: \"${label} không hợp lệ !\",\r\n    },\r\n    string: {\r\n      max: \"${label} tối đa 255 ký tự !\",\r\n    },\r\n    number: {\r\n      range: \"${label} trong khoảng 1-100 !\",\r\n    },\r\n    pattern: {\r\n      mismatch: \"${label} không hợp lệ !\",\r\n    },\r\n  };\r\n  const onSubmit = async (user) => {\r\n    setloading(true);\r\n    const respone = await UserApi.login(user);\r\n    console.log(respone);\r\n    dispatch(saveuser(respone));\r\n    dispatch(savetoken(respone))\r\n    if (respone?.error) {\r\n      setloading(false);\r\n      if (respone.error?.message == \"USERNAME_NOT_EXIST\") {\r\n        message.error(\"UserName đã tồn tại\");\r\n        console.log(message.error.message);\r\n      } else if (respone.error?.message == \"USER_PASSWORD_FALSE\") {\r\n        message.error(\"Sai Mật Khẩu\");\r\n      }\r\n    } else if (respone.type == 1 || respone.type == 2) {\r\n      setTimeout(() => {\r\n        history.push(\"/dashboard\");\r\n      }, 1000);\r\n    }\r\n  };\r\n \r\n  return (\r\n    <Aux>\r\n      {/* <Breadcrumb/> */}\r\n\r\n      <div className=\"auth-wrapper\">\r\n        <div className=\"auth-content\">\r\n          <div className=\"auth-bg\">\r\n            <span className=\"r\" />\r\n            <span className=\"r s\" />\r\n            <span className=\"r s\" />\r\n            <span className=\"r\" />\r\n          </div>\r\n          <div className=\"card\">\r\n            <div className=\"card-body text-center\">\r\n              <div className=\"mb-4\">\r\n                <i className=\"feather icon-unlock auth-icon\" />\r\n              </div>\r\n              {/* {loading ? <Spin className='huy'/>:''} */}\r\n              <h3 className=\"mb-3\">SmileTech</h3>\r\n              <h4 className=\"mb-4\">Đăng Nhập</h4>\r\n              <Form validateMessages={validateMessages} onFinish={onSubmit}>\r\n                <Form.Item\r\n                  name=\"user_name\"\r\n                  label=\"UserName\"\r\n                  required\r\n                  rules={[{ required: true }, { type: \"string\", max: 255 }]}\r\n                  style={{ width: \"100%\", paddingRight: \"10px\" }}\r\n                >\r\n                  <Input placeholder=\"\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  required\r\n                  rules={[\r\n                    { required: true, whitespace: true },\r\n                    { type: \"string\", max: 255 },\r\n                  ]}\r\n                  style={{ width: \"100%\", paddingRight: \"10px\" }}\r\n                >\r\n                  <Input.Password placeholder=\"\" />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                  <Button\r\n                    className=\"button-login\"\r\n                    htmlType=\"submit\"\r\n                    type=\"primary\"\r\n                  >\r\n                    Signin\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form>\r\n              {/* <div className=\"form-group text-left\">\r\n                                    <div className=\"checkbox checkbox-fill d-inline\">\r\n                                        <input type=\"checkbox\" name=\"checkbox-fill-1\" id=\"checkbox-fill-a1\" />\r\n                                            <label htmlFor=\"checkbox-fill-a1\" className=\"cr\"> Lưu thông tin đăng nhập</label>\r\n                                    </div>\r\n                                </div> */}\r\n\r\n              <p className=\"mb-2 text-muted\">\r\n                Quên mật khẩu ?{\" \"}\r\n                <NavLink to=\"/auth/reset-password-1\">Lấy lại</NavLink>\r\n              </p>\r\n              <p className=\"mb-0 text-muted\">\r\n                Bạn không có tài khoản ?{\" \"}\r\n                <NavLink to=\"/auth/signup\">Đăng kí</NavLink>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Aux>\r\n  );\r\n};\r\n\r\nexport default SignUp1;\r\n"],"sourceRoot":""}